[uwsgi]

###########################################################
# Environment processing
###########################################################

if-env = OPENSHIFT_DIY_IP
env_ip = %(_)
endif =

if-env = OPENSHIFT_DIY_PORT
env_port = %(_)
endif =

if-env = OPENSHIFT_REPO_DIR
env_repodir = %(_)
endif =

if-env = OPENSHIFT_DIY_LOG_DIR
env_logdir = %(_)
endif =

if-env = OPENSHIFT_TMP_DIR
env_tmpdir = %(_)
endif =

if-env = OPENSHIFT_DATA_DIR
env_datadir = %(_)
endif =


###########################################################
# uWSGI general config
###########################################################

# Bind to the specified socket using protocol.
socket = %(env_datadir)/pid/uwsgi.sock

# Force protocol for the socket
protocol = uwsgi

# Enable uWSGI master process.
master = true

# Spawn the specified number of workers/processes.
processes = 2

# Set lazy mode (load apps in workers instead of master).
# This option may have memory usage implications as Copy-on-Write semantics can
# not be used. When lazy is enabled, only workers will be reloaded by uWSGIâ€™s
# reload signals; the master will remain alive. As such, uWSGI configuration
# changes are not picked up on reload by the master.
# NOTE: it used to have separate db connections for workers.
# See:
# http://serverfault.com/questions/407612/error-2006-mysql-server-has-gone-away
# http://lists.unbit.it/pipermail/uwsgi/2011-May/002079.html
lazy = true

# Daemonize uWSGI and write messages into given log file.
# daemonize = %(env_logdir)/app.log

# Create pidfile (before privileges drop).
pidfile = %(env_datadir)/pid/uwsgi.pid


# Try to remove all of the generated files/sockets
# (UNIX sockets and pidfiles) upon exit.
vacuum = true

# Exit if no app can be loaded.
need-app = true

# Disable request logging.
disable-logging = 1

# Log requests slower than 300 ms.
log-slow = 300

# Rotate log if size is more than 10Mb
# TODO: do we need log-reopen?
log-maxsize = 12328960
log-backupname = %(env_logdir)/app.log.1
log-reopen
#Log directory
logto = /var/log/uwsgi/app/app.log
# Enable memory usage report.
#memory-report = 1

# Load uWSGI plugins (comma-separated).
# Uncomment if uwsgi fails to load application.
#plugins=python

# Set close-on-exec on sockets
# (could be required for spawning processes in requests).
#close-on-exec = 1


###########################################################
# Application config
###########################################################

# Chdir to specified directory before apps loading.
chdir = %(env_repodir)/wsgi

# Load application under mountpoint.
mount = /=%(env_repodir)/wsgi/application.py

## The following configs are used for testing purpose only!
## They allows to manage static files (like HTML) by the uWSGI.

# Map mountpoint to static directory (or file).
#static-map = /app=%(env_repodir)/tests/static
#static-map = /app.js=%(env_repodir)/tests/static/app.js
#static-map = /md5-min.js=%(env_repodir)/tests/static/md5-min.js
#static-index = index.html

# Automatically rewrite SCRIPT_NAME and PATH_INFO.
# If for some reason your webserver cannot manage SCRIPT_NAME
# on its own you can force uWSGI to rebuild
# the PATH_INFO variable automatically from it.
manage-script-name = true


###########################################################
# Application docs config
# Uncomment if you have API documentation
# in the $OPENSHIFT_DATA_DIR/quiz/apidoc and want
# to open access to it via web.
###########################################################
#static-map = /doc=%(env_datadir)/quiz/apidoc
#static-map = /_static=%(env_datadir)/quiz/apidoc/_static
#check-static = %(env_datadir)/quiz/apidoc
