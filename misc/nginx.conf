# This nginx config file is preprocessed to replace all ${VARIABLES}
# with their values.


# As a thumb rule: One per CPU. If you are serving a large amount
# of static files, which requires blocking disk reads, you may want
# to increase this from the number of cpu_cores available on your
# system.
#
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes  1;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections
worker_rlimit_nofile 8192;

error_log ${OPENSHIFT_DIY_LOG_DIR}/nginx-error.log;
pid ${OPENSHIFT_DATA_DIR}/pid/nginx.pid;

events {
    # When you need > 8000 * cpu_cores connections, you start optimizing
    # your OS, and this is probably the point at where you hire people
    # who are smarter than you, this is *a lot* of requests.
    worker_connections 8000;

    # This sets up some smart queueing for accept(2)'ing requests
    # Set it to "on" if you have > worker_processes
    accept_mutex off;

    # These settings are OS specific, by defualt Nginx uses select(2),
    # however, for a large number of requests epoll(2) and kqueue(2)
    # are generally faster than the default (select(2))
    # use epoll; # enable for Linux 2.6+
    # use kqueue; # enable for *BSD (FreeBSD, OS X, ..)
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  ${OPENSHIFT_DIY_LOG_DIR}/nginx-access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # TODO: configure gzip
    #gzip  on;

    server {
        # This will listen on all interfaces, you can instead choose a specific IP
        # such as listen x.x.x.x:80; Setting listen 80 default_server; will make
        # this server block the default one if no other blocks match the request
        listen ${OPENSHIFT_INTERNAL_IP}:${OPENSHIFT_INTERNAL_PORT};

        # Here you can set a server name, you can use wildcards such as *.example.com
        # however remember if you use server_name *.example.com; You'll only match subdomains
        # to match both subdomains and the main domain use both example.com and *.example.com
        server_name  localhost;

        access_log  ${OPENSHIFT_DIY_LOG_DIR}/nginx-host.access.log  main;

        # It is best to place the root of the server block at the server level, and not the location level
        # any location block path will be relative to this root.
        root ${OPENSHIFT_REPO_DIR}/tests/static;

        location /doc {
            root ${OPENSHIFT_DATA_DIR}/quiz/apidoc;
            index  index.html index.htm;
        }
        
        location /app {
            root ${OPENSHIFT_REPO_DIR}/tests/static;
            index  index.html index.htm;
        }

        location /v1 {
            uwsgi_pass unix://${OPENSHIFT_DATA_DIR}/pid/uwsgi.sock;
            include uwsgi_params;
        }
        
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
