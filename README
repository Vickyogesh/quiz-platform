This file provides information about the project structure
and server side dir layout and scripts.

misc/README and misc/doc provides info about the backend internals
(backend logic, DB logic/structure, etc).

tests/README provides info about testing tools.


Quiz Web Service repo layout
============================

doc/        - API documentation (you need sphinx to build HTML).
misc/       - Tools, initial db data and internals documentation.
test-data/  - Local configurations and other files.
              This folder is not included to the repo and
              used only for testing on local host.
tests/      - Quiz Web service backend tests & test tools.
web/        - Quiz Web Service frontend.
wsg/        - Quiz Web Service backend.


OpenShift-specific information
==============================

This section provides information about OpenShift scripts, dirs
and basic explanation the scripts works to serve Quiz Web Service backend.

OpenShift hooks (scripts)
-------------------------

Details of the scripts in .openshift/action_hooks dir:

build       - Run every git push as part of the build process.
              Install packages from the requirements.txt
              (uwsgi, werkzeug, etc); install sphinx documentation system 
              if $OPENSHIFT_DATA_DIR/quiz/apidoc exists.

deploy      - Run every git push after build but before the app is restarted.
              Update configs in the $OPENSHIFT_DATA_DIR/quiz dir if needed,
              Create nginx config from the template.
              Build API docs if $OPENSHIFT_DATA_DIR/quiz/apidoc exists.

post_deploy - Run every git push after the app is restarted. Not used.

pre_build   - Run every git push before the build.
              Download and install the following packages into
              $OPENSHIFT_DATA_DIR/bin dir: python 2.7.3, pip and nginx.
              $OPENSHIFT_DATA_DIR/quiz and $OPENSHIFT_DATA_DIR/pid dirs
              will be created. Also misc/img.zip will be extracted into
              $OPENSHIFT_DATA_DIR/quiz/img if the dir is not exist.

start       - Run to start the app. Start uwsg and nginx servers.

stop        - Run to stop the app. Stop uwsg and nginx servers.


Note: Every time you push, everything in your remote repo dir gets recreated
      please store long term items (like an sqlite database) in the OpenShift
      data directory, which will persist between pushes of your repo.
      The OpenShift data directory is accessible relative to the remote repo
      directory (../data) or using a path constructed as
      $OPENSHIFT_HOMEDIR/app-root/data.

OpenShift cron scripts
----------------------

The following scripts are used to run by cron
(paths are relative to .openshift/cron):

minutely/dbupdate     - Update schools statistics (each 5 min).
daily/del_old_session - Delete old session files.
weekly/rotatelogs     - Rotate logs and make week logs snapshots.
monthly/dbclean       - Remove old history data from the DB.

OpenShift directories
---------------------

Quiz Web Service creates/uses the following dirs:

* $OPENSHIFT_DATA_DIR/bin:
  - binaries and & libs for the backend (python, pip, etc).

* $OPENSHIFT_DATA_DIR/nginx:
  - nginx instalation.

* $OPENSHIFT_DATA_DIR/pid:
  - nginx and uwsgi pid & socket files.

* $OPENSHIFT_DATA_DIR/quiz:
  - backend configuration (config.ini)
  - nginx configuration template (nginx.conf; it will be used to create
    real nginx config at deployment stage - see deploy hook.)
  - backend server config (uwsgi.ini)

* $OPENSHIFT_DATA_DIR/quiz/apidoc:
  - backend web API documentation (HTML).

* $OPENSHIFT_DATA_DIR/quiz/img:
  - questions' images.

* $OPENSHIFT_DATA_DIR/quiz/sessions:
  - session data.

OpenShift Application setup
---------------------------

Quiz Web Service runs in a python-2.7 DIY cartridge.
This section provides steps to setup such DIY cartridge.

* Create an app:
  rhc app create -a quizplatform -t diy-0.1

* Add cartridges:
  rhc cartridge add mysql-5.1 -a quizplatform
  rhc cartridge add cron-1.4 -a quizplatform

* Setup OpenShift hooks & cron tasks:

* Edit configs if you need:
  * $OPENSHIFT_DATA_DIR/quiz/uwsgi.ini - backend server config
  * $OPENSHIFT_DATA_DIR/quiz/config.ini - backend config
  * $OPENSHIFT_DATA_DIR/quiz/nginx.conf - nginx config

* Setup quiz database with dbsetup tool
  cd $OPENSHIFT_REPO_DIR
  $OPENSHIFT_DATA_DIR/bin/python misc/dbinit.py -n -c misc/config.ini

Note: if you want to build API docs at deployment then create
      $OPENSHIFT_DATA_DIR/quiz/apidoc dir, and on next deployment
      the docs will be built.

Note: DB backup

Make dump:
mysqldump --routines --triggers -h $OPENSHIFT_MYSQL_DB_HOST -P ${OPENSHIFT_MYSQL_DB_PORT:-3306} -u ${OPENSHIFT_MYSQL_DB_USERNAME:-'admin'} --password="$OPENSHIFT_MYSQL_DB_PASSWORD" "$OPENSHIFT_APP_NAME"  | gzip > dump-`date +%d.%m.%Y`-sql.gz

Then update DEFINER in the dump in text editor.
Apply dump:
mysql -h $OPENSHIFT_MYSQL_DB_HOST -P ${OPENSHIFT_MYSQL_DB_PORT:-3306} -u ${OPENSHIFT_MYSQL_DB_USERNAME:-'admin'} --password="$OPENSHIFT_MYSQL_DB_PASSWORD" "$OPENSHIFT_APP_NAME" < dump.sql

UPDATE proc SET DEFINER = "newUser@host" WHERE DEFINER = "oldUser@localhost";
UPDATE quiz.proc SET DEFINER = "adminXHKDKVN@127.6.255.2" WHERE DEFINER = "adminASAJxDv@127.12.159.129";


Translations
------------

Translations support is provided via `Flask-BabelEx` packcage.

Here is article with more info:
http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiv-i18n-and-l10n


Commands:

    pybabel extract -F misc/babel.cfg -k lazy_gettext -o wsgi/quiz/ui/translations/ui.pot wsgi/quiz/ui
    pybabel init -i wsgi/quiz/ui/translations/ui.pot -d wsgi/quiz/ui/translations -D ui -l it
    pybabel compile -d wsgi/quiz/ui/translations -D ui

Update translations:

    pybabel extract -F misc/babel.cfg -k lazy_gettext -o wsgi/quiz/ui/translations/ui.pot wsgi/quiz/ui
    pybabel update -i wsgi/quiz/ui/translations/ui.pot -d wsgi/quiz/ui/translations -D ui


Adding new quiz
---------------

Pretty awkward for now.

To add new quiz you have to:
* Update exams() in misc/dbtools/func.py and recreate stored procedures in DB::

    > python misc/dbinit.py -c misc/config.ini -only-triggers

* Add questions to DB::

    > python misc/dbfill.py -c misc/config.ini -i ... -t [quiz_id]
* Update QUIZ_ID_MAP in wsgi/quiz/login.py with new quiz_id and quiz full name
* Update QUIZ_TITLE in wsgi/quiz/ui/uti.py
* If you add new quiz type then you need to create new page models in
  wsgi/quiz/ui/client and register them in wsgi/quiz/ui/client/__init__.py.


TODO:
* [menu] fix exam hover borders.
* Reformat readme.

Some openshift stuff:
https://www.openshift.com/blogs/openshift-online-march-2014-release-blog
http://openshift.github.io/documentation/oo_cartridge_guide.html#python
https://github.com/openshift/origin-server/blob/master/cartridges/openshift-origin-cartridge-python/usr/versions/shared/etc/conf.d/openshift.conf.erb
