Quiz Web Service repo layout
============================

misc/ - Contains tools, initial db data and documentation
tests/ - Web service tests
wsg/ - Quiz web service itself
test-data/ - Local configurations and other files. Used only for local testing.
             This folder is not included to the repo.


OpenShift hooks (scripts)
-------------------------

.openshift/action_hooks/build       - Run every git push as part of the build process.
.openshift/action_hooks/deploy      - Run every git push after build but before the app is restarted.
.openshift/action_hooks/post_deploy - Run every git push after the app is restarted.
.openshift/action_hooks/pre_build   - Run every git push before the build.
.openshift/action_hooks/start       - Run to start the app.
.openshift/action_hooks/stop        - Run to stop the app.

Note: Every time you push, everything in your remote repo dir gets recreated
      please store long term items (like an sqlite database) in the OpenShift
      data directory, which will persist between pushes of your repo.
      The OpenShift data directory is accessible relative to the remote repo
      directory (../data) or using a path constructed as
      $OPENSHIFT_HOMEDIR/app-root/data.


OpenShift Application setup
===========================

Quiz Web Service runs in a python-2.7 DIY cartridge.
This section provides steps to setup such DIY cartridge.


1) Create an app
  rhc app create -a quizplatform -t diy-0.1


2) Add MySql cartridge
  rhc cartridge add mysql-5.1 -a quizplatform


3) Edit basic OpenShift hooks

--- .openshift/action_hooks/stop ---
#!/bin/bash
if [  -f $OPENSHIFT_TMP_DIR/uwsgi.pid ]; then
kill -INT `cat $OPENSHIFT_TMP_DIR/uwsgi.pid`
fi


--- .openshift/action_hooks/build ---
$OPENSHIFT_DATA_DIR/bin/pip install --use-mirrors -r $OPENSHIFT_REPO_DIR/requirements.txt


--- .openshift/action_hooks/pre_build ---
#!/bin/bash
if [ ! -d $OPENSHIFT_DATA_DIR/quiz ]; then
mkdir $OPENSHIFT_DATA_DIR/quiz
cp $OPENSHIFT_REPO_DIR/misc/config.ini $OPENSHIFT_DATA_DIR/quiz
fi

if [ ! -d $OPENSHIFT_DATA_DIR/bin ]; then

# install python 2.7.3
cd $OPENSHIFT_TMP_DIR
wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2
tar jxf Python-2.7.3.tar.bz2
cd Python-2.7.3
./configure --prefix=$OPENSHIFT_DATA_DIR
make install

export PATH=$OPENSHIFT_DATA_DIR/bin:$PATH

# install setuptools
cd $OPENSHIFT_TMP_DIR
wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz
tar zxf setuptools-0.6c11.tar.gz
cd setuptools-0.6c11
python setup.py install

# install pip
cd $OPENSHIFT_TMP_DIR
wget http://pypi.python.org/packages/source/p/pip/pip-1.1.tar.gz
tar zxf pip-1.1.tar.gz
cd pip-1.1
python setup.py install

# install uWSGI
# Commented because we have uwsgi entry in the requirements.txt
# cd $OPENSHIFT_TMP_DIR
# pip install uwsgi

# cleanup
cd $OPENSHIFT_TMP_DIR
rm -rf Python-2.7.3.tar.bz2
rm -rf setuptools-0.6c11.tar.gz
rm -rf pip-1.1.tar.gz

fi


--- .openshift/action_hooks/start ---
# NOTE: -L option is for testing!
$OPENSHIFT_DATA_DIR/bin/uwsgi -L --master --process 2 -s $OPENSHIFT_INTERNAL_IP:$OPENSHIFT_INTERNAL_PORT --socket-protocol http --pp $OPENSHIFT_REPO_DIR/wsgi -w application:app -d $OPENSHIFT_DIY_LOG_DIR/app.log --pidfile $OPENSHIFT_TMP_DIR/uwsgi.pid


4) Setup quiz database with dbsetup tool
cd $OPENSHIFT_REPO_DIR
$OPENSHIFT_DATA_DIR/bin/python misc/dbsetup.py -nif -u real -c misc/config.ini


Develop flow
============

How to use git flow to work with production and testing repos

1) clone release openshift repo
2) git flow init
3) git remote add test [testing openshift repo]
4) git fetch test
5) (you have to be inside develop branch) git branch -u test/master
6) git pull

now you have two tracked branches:
    master - production repo
    develop - testing repo
